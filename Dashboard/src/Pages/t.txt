<div className="flex  w-full flex-col min-h-screen bg-gray-100">
        <ToastContainer />
        <div className="flex justify-between items-center p-4 bg-white shadow-sm">
          <SidebarToggleButton toggleSidebar={toggleSideBar} isSidebarCollapsed={!sideBar} />
          <div className="hidden sm:flex">
            <input
              className="outline-none px-4 py-2 border border-gray-300 rounded-md w-64"
              type="text"
              placeholder="Search"
              value={searchTerm}
              onChange={handleSearchChange}
            />
          </div>
          <button
            onClick={() => {
              setSelectedUserId(null);
              setEmailModalOpen(true);
            }}
            className="bg-blue-500 hidden md:flex text-white px-3 py-2 rounded-md hover:bg-blue-600 transition-colors"
          >
            <FaPaperPlane />
          </button>
          <div>
      <button
        onClick={() => setModalOpen(true)}
        className="bg-blue-500 hidden md:flex text-white px-4 py-2 rounded"
      >
       <span className=''> View Pending Users</span>
      </button>

      <PendingUsersModal isOpen={modalOpen} onClose={() => setModalOpen(false)} />
    </div>

          <div>
            <button
              onClick={() => setUserForm(true)}
              className="bg-green-700 flex items-center text-white px-4 py-2 rounded-md hover:bg-green-600 transition-colors"
            >
              <FaPlus className="mr-2" /> <span className="hidden sm:inline">Add</span>
            </button>
          </div>
          <UserAccount />
        </div>
        <div className="sm:hidden flex justify-between p-4">
          <input
            className="outline-none max-w-40 px-4 py-2 border border-gray-300 rounded-md"
            type="text"
            placeholder="Search"
            value={searchTerm}
            onChange={handleSearchChange}
          />
            <button
            onClick={() => {
              setSelectedUserId(null);
              setEmailModalOpen(true);
            }}
            className="bg-blue-500 text-white px-3 py-2 rounded-md hover:bg-blue-600 transition-colors"
          >
            <FaPaperPlane />
          </button>
          <button
        onClick={() => setModalOpen(true)}
        className="bg-blue-500  text-white px-4 py-2 rounded"
      >
       <span className=''>Pending</span>
      </button>
        </div>

        {emailModalOpen && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white p-6 rounded-lg max-w-md w-full shadow-lg">
              <h2 className="text-xl font-semibold mb-4">
                {selectedUserId ? 'Send Email to User' : 'Send Email to All Users'}
              </h2>
              <form onSubmit={handleEmailSubmit}>
                <div className="mb-4">
                  <label className="block text-sm font-medium">Email Content</label>
                  <textarea
                    className="w-full p-2 border border-gray-300 rounded-md"
                    placeholder="Type your email content here..."
                    value={emailContent}
                    onChange={(e) => setEmailContent(e.target.value)}
                    rows="5"
                  />
                </div>
                <div className="flex justify-end gap-4">
                  <button
                    onClick={() => setEmailModalOpen(false)}
                    className="px-4 py-2 bg-gray-300 text-black rounded-md hover:bg-gray-400 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type="submit"
                    className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
                  >
                    Send Email
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {userform && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white p-6 rounded-lg max-h-[72vh] md:max-h-[90vh] overflow-y-auto w-full mx-5 md:w-2/3 shadow-lg">
              <form onSubmit={handleSubmit} className="w-full flex flex-col gap-3 md:grid md:grid-cols-2 lg:grid-cols-3">
                <h2 className="text-xl font-semibold mb-4 col-span-full">{formData._id ? 'Update User' : 'Add New User'}</h2>

                <div className="mb-4">
                  <label className="block text-sm font-medium">Username</label>
                  <input
                    type="text"
                    className="w-full p-2 border border-gray-300 rounded-md"
                    name='username'
                    onChange={handleOnChange}
                    value={formData.username}
                    placeholder="Enter username"
                  />
                </div>

                <div className="mb-4">
                  <label className="block text-sm font-medium">Full Name</label>
                  <input
                    type="text"
                    className="w-full p-2 border border-gray-300 rounded-md"
                    name='fullName'
                    onChange={handleOnChange}
                    value={formData.fullName}
                    placeholder="Enter full name"
                  />
                </div>

                <div className="mb-4">
                  <label className="block text-sm font-medium">Email</label>
                  <input
                    type="email"
                    className="w-full p-2 border border-gray-300 rounded-md"
                    name='email'
                    onChange={handleOnChange}
                    value={formData.email}
                    placeholder="user@example.com"
                  />
                </div>

                <div className="mb-4">
                  <label className="block text-sm font-medium">Password</label>
                  <input
                    type="password"
                    className="w-full p-2 border border-gray-300 rounded-md"
                    name='password'
                    onChange={handleOnChange}
                    value={formData.password}
                    placeholder="Password"
                  />
                </div>

                <div className="mb-4">
                  <label className="block text-sm font-medium">Phone Number</label>
                  <input
                    type="text"
                    className="w-full p-2 border border-gray-300 rounded-md"
                    name='phoneNumber'
                    onChange={handleOnChange}
                    value={formData.phoneNumber}
                    placeholder="Phone number"
                  />
                </div>

                <div className="mb-4">
                  <label className="block text-sm font-medium">Profile Picture</label>
                  <input
                    type="text"
                    className="w-full p-2 border border-gray-300 rounded-md"
                    name='profilePicture'
                    onChange={handleOnChange}
                    value={formData.profilePicture}
                    placeholder="Image URL"
                  />
                </div>

                <div className="mb-4">
                  <label className="block text-sm font-medium">Role</label>
                  <select
                    name='role'
                    className="w-full p-2 border border-gray-300 rounded-md"
                    onChange={handleOnChange}
                    value={formData.role}
                  >
                    <option value="user">User</option>
                    <option value="admin">Admin</option>
                    <option value="moderator">Moderator</option>
                  </select>
                </div>

                <div className="mb-4">
                  <label className="block text-sm font-medium">Status</label>
                  <select
                    name='status'
                    className="w-full p-2 border border-gray-300 rounded-md"
                    onChange={handleOnChange}
                    value={formData.status}
                  >
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="suspended">Suspended</option>
                  </select>
                </div>

                <div className="mb-4">
                  <label className="block text-sm font-medium">Address</label>
                  <input
                    type="text"
                    className="w-full p-2 border border-gray-300 rounded-md"
                    name='address'
                    onChange={handleOnChange}
                    value={formData.address}
                    placeholder="Enter address"
                  />
                </div>

                <div className="mb-4">
                  <label className="block text-sm font-medium">Date of Birth</label>
                  <input
                    type="date"
                    className="w-full p-2 border border-gray-300 rounded-md"
                    name='dateOfBirth'
                    onChange={handleOnChange}
                    value={formData.dateOfBirth}
                  />
                </div>

                <div className="flex justify-end gap-4 col-span-full">
                  <button
                    onClick={() => setUserForm(false)}
                    className="px-4 py-2 bg-gray-300 text-black rounded-md hover:bg-gray-400 transition-colors"
                  >
                    Cancel
                  </button>
                  <button
                    type='submit'
                    className="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors"
                  >
                    {formData._id ? 'Update User' : 'Add User'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}

        {isDeleteModalOpen && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white p-6 rounded-lg w-80 shadow-lg">
              <h3 className="text-xl mb-4">Are you sure you want to delete this user?</h3>
              <div className="flex justify-end gap-4">
                <button
                  onClick={() => setIsDeleteModalOpen(false)}
                  className="px-4 py-2 bg-gray-300 text-black rounded-md hover:bg-gray-400 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={confirmDelete}
                  className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
                >
                  Yes, Delete
                </button>
              </div>
            </div>
          </div>
        )}

      </div>